#!/bin/bash

# Cyberpunk PAM USB Authentication Animation
# This script provides a cyberpunk animation during PAM USB authentication

# Save the original sudo command
REAL_SUDO="/usr/bin/sudo"

# Config file path
CONFIG_FILE="$HOME/.config/psudo/config"
CONFIG_DIR="$HOME/.config/psudo"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
BRIGHT_RED='\033[1;31m'
BRIGHT_GREEN='\033[1;32m'
BRIGHT_YELLOW='\033[1;33m'
BRIGHT_BLUE='\033[1;34m'
BRIGHT_MAGENTA='\033[1;35m'
BRIGHT_CYAN='\033[1;36m'
NC='\033[0m' # No Color

# GitHub repository URL for updates
GITHUB_REPO="https://github.com/eraxe/oh-my-pamusb-zsh-animation.git"
INSTALL_DIR="$HOME/.local/bin"
ZSHRC="$HOME/.zshrc"

# Load config if it exists
if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
else
    # Default configuration
    ANIMATION_ENABLED=true
    DEBUG_MODE=false
    ANIMATION_SPEED=0.05
    ANIMATION_STYLE="minimal"
fi

# Create config directory if it doesn't exist
ensure_config_dir() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
    fi
}

# Save configuration
save_config() {
    ensure_config_dir
    cat > "$CONFIG_FILE" << EOF
# Cyberpunk PAM USB Animation Configuration
# Generated by psudo command

# Enable or disable animation (true/false)
ANIMATION_ENABLED=$ANIMATION_ENABLED

# Debug mode (true/false)
DEBUG_MODE=$DEBUG_MODE

# Animation speed (lower is faster)
ANIMATION_SPEED=$ANIMATION_SPEED

# Animation style (minimal, full, retro)
ANIMATION_STYLE="$ANIMATION_STYLE"
EOF
    chmod 600 "$CONFIG_FILE"
}

# Position and clear the line - now just returns empty since we don't center anymore
goto_center() {
    # No longer centering, just return
    return
}

# Function to show minimal loading animation
show_animation() {
    # Return immediately if animations are disabled
    if [ "$ANIMATION_ENABLED" = "false" ]; then
        return
    fi

    # Save terminal settings
    local saved_tty_settings=$(stty -g 2>/dev/null || echo "")

    echo -ne "\033[?25l" # Hide cursor

    # Select animation based on style
    case "$ANIMATION_STYLE" in
        "full")
            # Full cyberpunk style animation (more elaborate)
            local frames=(
                "▌│█║▌║▌║ SCANNING ║▌║▌║█│▌"
                "▌│█║▌║▌║ SECURING ║▌║▌║█│▌"
                "▌│█║▌║▌║ VERIFYING ║▌║▌║█│▌"
                "▌│█║▌║▌║ AUTHENTICATING ║▌║▌║█│▌"
            )
            ;;
        "retro")
            # Retro computer style
            local frames=(
                "[ AUTHENTICATING... |   ]"
                "[ AUTHENTICATING... /   ]"
                "[ AUTHENTICATING... -   ]"
                "[ AUTHENTICATING... \\   ]"
            )
            ;;
        *)
            # Default minimal style
            local load_chars=("█" "█" "█" "█" "█" "█" "█" "█" "█" "█" "█" "█" "█" "█" "█")
            local empty_chars=("▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒" "▒")
            ;;
    esac

    local count=0
    local max_count=15

    # Loop until canceled
    while true; do
        if [ "$ANIMATION_STYLE" = "minimal" ]; then
            # Print the loading bar (no borders)
            printf "\r["

            # First part of the bar (filled)
            for ((i=0; i<count; i++)); do
                if [ $i -eq $((count/2)) ]; then
                    printf "${BRIGHT_CYAN}AUTHENTICATING${NC}"
                else
                    printf "${BRIGHT_RED}${load_chars[$i]}${NC}"
                fi
            done

            # Second part of the bar (empty)
            for ((i=count; i<max_count; i++)); do
                printf "${BRIGHT_CYAN}${empty_chars[$i]}${NC}"
            done

            printf "]"
        else
            # Print the frame for other animation styles
            printf "\r${BRIGHT_CYAN}%s${NC}" "${frames[$((count % ${#frames[@]}))]}}"
        fi

        # Increment
        ((count++))
        if [ "$ANIMATION_STYLE" = "minimal" ] && ((count > max_count)); then
            count=0
        elif ((count >= ${#frames[@]})); then
            count=0
        fi

        # Sleep for a short time
        sleep $ANIMATION_SPEED
    done

    # Animation is stopped by signal, but save the settings for restoration
    echo "$saved_tty_settings"
}

# Function to properly clean up animation and restore terminal
cleanup_animation() {
    local anim_pid=$1
    local saved_settings=$2

    # Kill the animation if it's running
    if ps -p $anim_pid > /dev/null 2>&1; then
        kill $anim_pid 2>/dev/null
        wait $anim_pid 2>/dev/null
    fi

    # Clear animation line
    printf "\r\033[K"

    # Show cursor
    echo -ne "\033[?25h"

    # Restore terminal settings if we have them
    if [ -n "$saved_settings" ]; then
        stty "$saved_settings" 2>/dev/null
    fi

    # Reset terminal completely as a fallback
    stty sane 2>/dev/null
    tput sgr0 2>/dev/null
    echo -ne "\033c" 2>/dev/null # Reset terminal
}

# Check if output is a terminal
is_terminal() {
    [ -t 1 ]
}

# Check if a command is likely to be interactive or uses ncurses
is_interactive_or_ncurses() {
    local cmd="$*"
    # List of known interactive commands or applications using ncurses
    local interactive_cmds=("rm -i" "rm -r" "rm -rf" "apt" "apt-get" "pacman" "yum" "dnf"
                           "pip" "npm" "git commit" "nano" "vim" "vi" "less" "more"
                           "top" "htop" "sysdiag" "ncdu" "mc" "mutt" "ranger" "dialog"
                           "whiptail" "lynx" "links" "elinks" "cmus" "alsamixer"
                           "aptitude" "synaptic" "wicd-curses" "iotop" "iostat" "iftop"
                           "nethogs" "nmon" "bmon" "vnstat" "tcpdump" "netstat"
                           "fdisk" "gdisk" "parted" "gparted" "visudo" "vigr" "vipw"
                           "systemctl" "journalctl" "dmesg" "tail -f" "watch")

    for icmd in "${interactive_cmds[@]}"; do
        if [[ "$cmd" == *"$icmd"* ]]; then
            return 0 # True, interactive or uses ncurses
        fi
    done

    return 1 # False, probably safe to use redirection
}

# Function to display psudo help
show_psudo_help() {
    echo -e "${BRIGHT_CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BRIGHT_CYAN}║${BRIGHT_MAGENTA}  ░▒▓█ ${BRIGHT_YELLOW}CYBERPUNK PAM USB ANIMATION SETTINGS${BRIGHT_MAGENTA} █▓▒░  ${BRIGHT_CYAN}║${NC}"
    echo -e "${BRIGHT_CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BRIGHT_YELLOW}Usage:${NC} psudo [command] [options]"
    echo ""
    echo -e "${BRIGHT_BLUE}Commands:${NC}"
    echo -e "  ${BRIGHT_GREEN}status${NC}       Show current configuration"
    echo -e "  ${BRIGHT_GREEN}enable${NC}       Enable the animation"
    echo -e "  ${BRIGHT_GREEN}disable${NC}      Disable the animation"
    echo -e "  ${BRIGHT_GREEN}debug${NC} on|off Enable or disable debug mode"
    echo -e "  ${BRIGHT_GREEN}speed${NC} VALUE  Set animation speed (default: 0.05, lower is faster)"
    echo -e "  ${BRIGHT_GREEN}style${NC} NAME   Set animation style (minimal, full, retro)"
    echo -e "  ${BRIGHT_GREEN}update${NC}       Update to the latest version from GitHub"
    echo -e "  ${BRIGHT_GREEN}uninstall${NC}    Remove the script and configuration"
    echo -e "  ${BRIGHT_GREEN}help${NC}         Show this help message"
    echo ""
    echo -e "${BRIGHT_BLUE}Examples:${NC}"
    echo -e "  ${BRIGHT_GREEN}psudo status${NC}      Show current configuration"
    echo -e "  ${BRIGHT_GREEN}psudo disable${NC}     Disable the animation temporarily"
    echo -e "  ${BRIGHT_GREEN}psudo enable${NC}      Re-enable the animation"
    echo -e "  ${BRIGHT_GREEN}psudo style full${NC}  Use the full cyberpunk animation style"
    echo -e "  ${BRIGHT_GREEN}psudo speed 0.02${NC}  Set a faster animation speed"
    echo ""
}

# Function to show current configuration
show_status() {
    echo -e "${BRIGHT_CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BRIGHT_CYAN}║${BRIGHT_MAGENTA}  ░▒▓█ ${BRIGHT_YELLOW}CYBERPUNK PAM USB ANIMATION STATUS${BRIGHT_MAGENTA} █▓▒░   ${BRIGHT_CYAN}║${NC}"
    echo -e "${BRIGHT_CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BRIGHT_BLUE}Current Configuration:${NC}"
    echo -e "  ${BRIGHT_YELLOW}Animation:${NC} $([ "$ANIMATION_ENABLED" = "true" ] && echo -e "${BRIGHT_GREEN}Enabled${NC}" || echo -e "${BRIGHT_RED}Disabled${NC}")"
    echo -e "  ${BRIGHT_YELLOW}Debug Mode:${NC} $([ "$DEBUG_MODE" = "true" ] && echo -e "${BRIGHT_GREEN}Enabled${NC}" || echo -e "${BRIGHT_RED}Disabled${NC}")"
    echo -e "  ${BRIGHT_YELLOW}Animation Speed:${NC} ${BRIGHT_GREEN}$ANIMATION_SPEED${NC}"
    echo -e "  ${BRIGHT_YELLOW}Animation Style:${NC} ${BRIGHT_GREEN}$ANIMATION_STYLE${NC}"
    echo -e "  ${BRIGHT_YELLOW}Installation Directory:${NC} ${BRIGHT_GREEN}$INSTALL_DIR${NC}"
    echo ""
}

# Function to update from GitHub
update_from_github() {
    # Check for git
    if ! command -v git &> /dev/null; then
        echo -e "${BRIGHT_RED}[!]${NC} Git is not installed. Please install git first."
        return 1
    fi

    echo -e "${BRIGHT_BLUE}[*]${NC} Updating from GitHub..."

    # Create temporary directory
    local TEMP_DIR=$(mktemp -d)
    echo -e "${BRIGHT_BLUE}[*]${NC} Created temporary directory: $TEMP_DIR"

    # Clone the repository
    echo -e "${BRIGHT_BLUE}[*]${NC} Downloading latest version from GitHub..."
    if ! git clone "$GITHUB_REPO" "$TEMP_DIR"; then
        echo -e "${BRIGHT_RED}[!]${NC} Failed to download the latest version from GitHub."
        rm -rf "$TEMP_DIR"
        return 1
    fi

    # Check if the required files exist in the downloaded repo
    if [ ! -f "$TEMP_DIR/install.sh" ] || [ ! -f "$TEMP_DIR/oh-my-pamusb-zsh-animation.sh" ]; then
        echo -e "${BRIGHT_RED}[!]${NC} Downloaded repository is missing required files."
        rm -rf "$TEMP_DIR"
        return 1
    fi

    # Make the script executable
    chmod +x "$TEMP_DIR/install.sh"

    # Backup current configuration
    ensure_config_dir
    if [ -f "$CONFIG_FILE" ]; then
        cp "$CONFIG_FILE" "$CONFIG_FILE.bak"
        echo -e "${BRIGHT_BLUE}[*]${NC} Backed up configuration to $CONFIG_FILE.bak"
    fi

    # Backup current zshrc
    cp "$ZSHRC" "$ZSHRC.update_backup"
    echo -e "${BRIGHT_BLUE}[*]${NC} Backed up $ZSHRC to $ZSHRC.update_backup"

    # Install the new version
    echo -e "${BRIGHT_BLUE}[*]${NC} Installing new version..."
    cp "$TEMP_DIR/oh-my-pamusb-zsh-animation.sh" "$INSTALL_DIR/sudo-wrapper.sh"
    chmod +x "$INSTALL_DIR/sudo-wrapper.sh"

    # Clean up
    rm -rf "$TEMP_DIR"

    echo -e "${BRIGHT_GREEN}[+]${NC} Update completed successfully!"
    echo -e "${BRIGHT_YELLOW}Note:${NC} Please restart your terminal or run '${BRIGHT_GREEN}source $ZSHRC${NC}' to apply changes."
}

# Function to uninstall
uninstall_script() {
    echo -e "${BRIGHT_CYAN}╔══════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BRIGHT_CYAN}║${BRIGHT_MAGENTA}  ░▒▓█ ${BRIGHT_YELLOW}CYBERPUNK PAM USB ANIMATION UNINSTALLER${BRIGHT_MAGENTA} █▓▒░  ${BRIGHT_CYAN}║${NC}"
    echo -e "${BRIGHT_CYAN}╚══════════════════════════════════════════════════════════╝${NC}"
    echo ""

    echo -e "${BRIGHT_BLUE}[*]${NC} Starting uninstallation process..."

    # Remove the wrapper script
    if [ -f "$INSTALL_DIR/sudo-wrapper.sh" ]; then
        rm -f "$INSTALL_DIR/sudo-wrapper.sh"
        echo -e "${BRIGHT_GREEN}[+]${NC} Removed sudo wrapper script"
    else
        echo -e "${BRIGHT_YELLOW}[!]${NC} sudo wrapper script not found"
    fi

    # Remove configuration files
    if [ -d "$CONFIG_DIR" ]; then
        rm -rf "$CONFIG_DIR"
        echo -e "${BRIGHT_GREEN}[+]${NC} Removed configuration directory"
    fi

    # Remove ZSH configuration
    if [ -f "$ZSHRC" ]; then
        # Check if our configuration exists in zshrc
        if grep -q "BEGIN_CYBERPUNK_PAM_USB" "$ZSHRC"; then
            sed -i '/# BEGIN_CYBERPUNK_PAM_USB/,/# END_CYBERPUNK_PAM_USB/d' "$ZSHRC"
            echo -e "${BRIGHT_GREEN}[+]${NC} Removed configuration from $ZSHRC"
        else
            # Try to find and remove the old style configuration
            sed -i '/# Cyberpunk PAM USB Animation - Added by installer script/,+5d' "$ZSHRC"
            echo -e "${BRIGHT_GREEN}[+]${NC} Removed old configuration from $ZSHRC"
        fi
    fi

    echo -e "${BRIGHT_GREEN}[+]${NC} Uninstallation completed!"
    echo -e "${BRIGHT_YELLOW}Note:${NC} Please restart your terminal or run '${BRIGHT_GREEN}source $ZSHRC${NC}' to apply changes."
}

# Process psudo command
process_psudo_command() {
    case "$1" in
        "status")
            show_status
            ;;
        "enable")
            ANIMATION_ENABLED=true
            save_config
            echo -e "${BRIGHT_GREEN}[+]${NC} Animation enabled"
            ;;
        "disable")
            ANIMATION_ENABLED=false
            save_config
            echo -e "${BRIGHT_GREEN}[+]${NC} Animation disabled"
            ;;
        "debug")
            if [ "$2" = "on" ]; then
                DEBUG_MODE=true
                save_config
                echo -e "${BRIGHT_GREEN}[+]${NC} Debug mode enabled"
            elif [ "$2" = "off" ]; then
                DEBUG_MODE=false
                save_config
                echo -e "${BRIGHT_GREEN}[+]${NC} Debug mode disabled"
            else
                echo -e "${BRIGHT_RED}[!]${NC} Invalid option for debug. Use 'on' or 'off'"
                return 1
            fi
            ;;
        "speed")
            if [[ "$2" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
                ANIMATION_SPEED=$2
                save_config
                echo -e "${BRIGHT_GREEN}[+]${NC} Animation speed set to $ANIMATION_SPEED"
            else
                echo -e "${BRIGHT_RED}[!]${NC} Invalid speed value. Use a number (e.g., 0.05)"
                return 1
            fi
            ;;
        "style")
            case "$2" in
                "minimal"|"full"|"retro")
                    ANIMATION_STYLE=$2
                    save_config
                    echo -e "${BRIGHT_GREEN}[+]${NC} Animation style set to $ANIMATION_STYLE"
                    ;;
                *)
                    echo -e "${BRIGHT_RED}[!]${NC} Invalid style. Choose from: minimal, full, retro"
                    return 1
                    ;;
            esac
            ;;
        "update")
            update_from_github
            ;;
        "uninstall")
            echo -e "${BRIGHT_YELLOW}[!]${NC} Are you sure you want to uninstall? (y/n)"
            read -r confirm
            if [[ "$confirm" =~ ^[Yy]$ ]]; then
                uninstall_script
            else
                echo -e "${BRIGHT_BLUE}[*]${NC} Uninstall canceled"
            fi
            ;;
        "help"|"")
            show_psudo_help
            ;;
        *)
            echo -e "${BRIGHT_RED}[!]${NC} Unknown command: $1"
            show_psudo_help
            return 1
            ;;
    esac
}

# Check for debug mode
debug_mode=0
sudo_args=()
for arg in "$@"; do
    if [ "$arg" = "--sudo-debug" ]; then
        debug_mode=1
    else
        sudo_args+=("$arg")
    fi
done

# Run sudo with all arguments
if [[ "$1" == "--original" ]]; then
    shift
    $REAL_SUDO "$@"
elif [[ "$1" == "psudo" ]]; then
    shift
    process_psudo_command "$@"
else
    # Only run animation if this is a terminal and animation is enabled
    if is_terminal && [ "$ANIMATION_ENABLED" = "true" ]; then
        # Get the command string for display
        CMD_STR="sudo"
        for arg in "${sudo_args[@]}"; do
            if [[ "$arg" == *" "* ]]; then
                CMD_STR="$CMD_STR \"$arg\""
            else
                CMD_STR="$CMD_STR $arg"
            fi
        done

        # Check if the command is likely interactive or uses ncurses
        if is_interactive_or_ncurses "${sudo_args[@]}"; then
            # For interactive commands, show a short animation and then run normally
            saved_settings=""
            show_animation &
            ANIM_PID=$!

            # Show animation for just 1 second for interactive commands
            sleep 1

            # Properly clean up the animation and restore terminal
            cleanup_animation $ANIM_PID "$saved_settings"

            # Clear animation line
            printf "\r\033[K${RED}[${NC} ${CYAN}AUTH MODE: INTERACTIVE${NC} ${RED}]${NC}\n"

            # Reset terminal completely before running the command
            stty sane 2>/dev/null
            tput reset 2>/dev/null

            # Run the command directly without output redirection
            $REAL_SUDO "${sudo_args[@]}"
            EXIT_CODE=$?

            exit $EXIT_CODE
        else
            # Start animation directly with captured terminal settings
            saved_settings=$(show_animation &)
            ANIM_PID=$!

            # Trap to make sure we kill the animation and restore terminal if the script exits
            trap 'cleanup_animation $ANIM_PID "$saved_settings"' EXIT INT TERM

            # Run sudo with debug output if requested
            if [ $debug_mode -eq 1 ] || [ "$DEBUG_MODE" = "true" ]; then
                # Clean up the animation properly
                cleanup_animation $ANIM_PID "$saved_settings"

                # Now print the command
                printf "> $CMD_STR\n"

                # Run with debug output visible
                $REAL_SUDO "${sudo_args[@]}"
                EXIT_CODE=$?

                exit $EXIT_CODE
            else
                # Create temporary files for output
                output_file=$(mktemp)
                filtered_file=$(mktemp)

                # Temporarily redirect all output to prevent PAM from showing
                exec 3>&1 4>&2
                exec 1>"$output_file" 2>&1

                # Run sudo command
                $REAL_SUDO "${sudo_args[@]}"
                EXIT_CODE=$?

                # Restore normal output
                exec 1>&3 2>&4

                # Clean up the animation properly
                cleanup_animation $ANIM_PID "$saved_settings"

                # Show status without repeating the command
                if [ $EXIT_CODE -eq 0 ]; then
                    printf "${RED}[${NC} ${CYAN}AUTH ✓${NC} ${RED}]${NC}\n"
                else
                    printf "${CYAN}[${NC} ${RED}AUTH ✗${NC} ${CYAN}]${NC}\n"
                fi

                # Filter out all PAM and authentication messages
                grep -v "Authentication" "$output_file" |
                grep -v "hardware database" |
                grep -v "device" |
                grep -v "one time pad" |
                grep -v "Access granted" |
                grep -v "Access denied" > "$filtered_file"

                # Display only the filtered command output
                cat "$filtered_file"

                # Clean up temporary files
                rm -f "$output_file" "$filtered_file"

                exit $EXIT_CODE
            fi
        fi
    else
        # Not a terminal or animation disabled, just run sudo normally
        $REAL_SUDO "${sudo_args[@]}"
    fi
fi